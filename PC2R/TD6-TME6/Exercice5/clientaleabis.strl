%%%%%%%%%% clientaleabis.strl %%%%%%%%%%

module clientaleabis:

%{
  variante : comme chaque branche avance exactement d'un pas de boucle pendant
  un instant, la boucle peut etre sequentielle et contenir les branches.
  On deplace aussi l'amorce du travail de l'instant (emission de S).
  Un sequentiel avec if imbriques pourrait faire l'affaire mais ...  
  l'interet est d'avoir des taches tres simples faciles a
  concevoir/ecrire/mettre en circuits
}%

output S := 0 :integer;
input FIN;
output F1 : integer, F2 : integer, F3 : integer;

procedure init (integer) (integer); 
procedure alea (integer) (integer); 

var res := 1 : integer, donnee := 0 : integer,
    n1 := 0 : integer, n2 := 0 : integer,
    n3:= 0: integer in
   call init(res)(donnee); 
   abort
      loop 
         [ 
            await immediate S;
            if ?S = 1 then n1 := n1+1;  
            end if;   
         ||    
            await immediate S;  
            if ?S = 2 then n2 := n2+1;  end if; 
         ||    
            await immediate S;  
            if ?S = 3 then n3 := n3+1;   end if;  
         || 
            call alea(res)(3);
            emit S(res + 1); 
         ];  
         pause;  
      end loop;    
   when FIN do  
      emit F1(n1);
      emit F2(n2);
      emit F3(n3);  
   end abort; 
end var

end module


% clientaleabis.h doit contenir les declarations c des fonctions init et alea
% esterel -simul clientaleabis.strl
% gcc -o clientaleabis clientaleabis.c alea.o \
%      -I \$ESTEREL/include -L $ESTEREL/lib -lcsimul
