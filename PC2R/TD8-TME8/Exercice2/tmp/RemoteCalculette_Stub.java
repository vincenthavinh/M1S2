// Stub class generated by rmic - DO NOT EDIT!

public final class RemoteCalculette_Stub
    extends java.rmi.server.RemoteStub
    implements IRemoteCalculette
{
    private static final long serialVersionUID = 2L;
    
    private static final long interfaceHash = 266392L;
    
    private static boolean useNewInvoke;
    
    private static final java.rmi.server.Operation[] operations = {
        new java.rmi.server.Operation("void cumuler(java.lang.Integer)"),
        new java.rmi.server.Operation("java.lang.Integer eval(java.lang.Integer, java.lang.Integer)"),
        new java.rmi.server.Operation("java.lang.Integer getCumul()"),
        new java.rmi.server.Operation("void resetCumul()")
    };
    
    private static java.lang.reflect.Method $method_cumuler_0;
    private static java.lang.reflect.Method $method_eval_1;
    private static java.lang.reflect.Method $method_getCumul_2;
    private static java.lang.reflect.Method $method_resetCumul_3;
    
    static {
        try {
            java.rmi.server.RemoteRef.class.getMethod("invoke", new java.lang.Class[] { java.rmi.Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class });
            useNewInvoke = true;
            $method_cumuler_0 = IRemoteCalculette.class.getMethod("cumuler", new java.lang.Class[] {java.lang.Integer.class});
            $method_eval_1 = IRemoteCalculette.class.getMethod("eval", new java.lang.Class[] {java.lang.Integer.class, java.lang.Integer.class});
            $method_getCumul_2 = IRemoteCalculette.class.getMethod("getCumul", new java.lang.Class[] {});
            $method_resetCumul_3 = IRemoteCalculette.class.getMethod("resetCumul", new java.lang.Class[] {});
            
        }
        catch (java.lang.NoSuchMethodException e) {
            useNewInvoke = false;
        }
    }
    
    public RemoteCalculette_Stub() {
        super();
    }
    public RemoteCalculette_Stub(java.rmi.server.RemoteRef ref) {
        super(ref);
    }
    
    public void cumuler(java.lang.Integer $param_0) throws java.rmi.RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_cumuler_0, new java.lang.Object[] {$param_0}, 2037129987253436966L);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 0, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_0);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                try {
                    java.io.ObjectInput in = call.getInputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    public java.lang.Integer eval(java.lang.Integer $param_0, java.lang.Integer $param_1) throws java.rmi.RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_eval_1, new java.lang.Object[] {$param_0, $param_1}, -2297158981752979836L);
                return ((java.lang.Integer)$result);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 1, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_0);
                    out.writeObject($param_1);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                java.lang.Integer $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (java.lang.Integer)in.readObject();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    public java.lang.Integer getCumul() throws java.rmi.RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_getCumul_2, null, 6266889176079361830L);
                return ((java.lang.Integer)$result);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 2, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                java.lang.Integer $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (java.lang.Integer)in.readObject();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    public void resetCumul() throws java.rmi.RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_resetCumul_3, null, 5887732619929798478L);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 3, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                try {
                    java.io.ObjectInput in = call.getInputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
}
